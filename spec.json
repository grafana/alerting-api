{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Documentation of the API.",
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/alertmanager/{DatasourceId}/api/v2/alerts": {
      "get": {
        "description": "get alertmanager alerts",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetAmAlerts",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Active",
            "description": "Show active alerts",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Silenced",
            "description": "Show silenced alerts",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Inhibited",
            "description": "Show inhibited alerts",
            "name": "inhibited",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Matchers",
            "description": "A list of matchers to filter alerts by",
            "name": "matchers",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Receivers",
            "description": "A list of receivers to filter alerts by",
            "name": "receivers",
            "in": "query"
          },
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableAlerts",
            "schema": {
              "$ref": "#/definitions/GettableAlerts"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/alertmanager/{DatasourceId}/api/v2/alerts/groups": {
      "get": {
        "description": "get alertmanager alerts",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetAmAlertGroups",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Active",
            "description": "Show active alerts",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Silenced",
            "description": "Show silenced alerts",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Inhibited",
            "description": "Show inhibited alerts",
            "name": "inhibited",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Matchers",
            "description": "A list of matchers to filter alerts by",
            "name": "matchers",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Receivers",
            "description": "A list of receivers to filter alerts by",
            "name": "receivers",
            "in": "query"
          },
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AlertGroups",
            "schema": {
              "$ref": "#/definitions/AlertGroups"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/alertmanager/{DatasourceId}/api/v2/silence/{SilenceId}": {
      "get": {
        "description": "get silence",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetSilence",
        "parameters": [
          {
            "type": "string",
            "name": "SilenceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableSilence",
            "schema": {
              "$ref": "#/definitions/GettableSilence"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "description": "delete silence",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteDeleteSilence",
        "parameters": [
          {
            "type": "string",
            "name": "SilenceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/alertmanager/{DatasourceId}/api/v2/silences": {
      "get": {
        "description": "get silences",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetSilences",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableSilences",
            "schema": {
              "$ref": "#/definitions/GettableSilences"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "post": {
        "description": "create silence",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteCreateSilence",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SilenceBody"
            }
          },
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "GettableSilence",
            "schema": {
              "$ref": "#/definitions/GettableSilence"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/alertmanager/{DatasourceId}/config/api/v1/alerts": {
      "get": {
        "description": "gets an Alerting config",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetAlertingConfig",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableUserConfig",
            "schema": {
              "$ref": "#/definitions/GettableUserConfig"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "post": {
        "description": "sets an Alerting config",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RoutePostAlertingConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostableUserConfig"
            }
          },
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "description": "deletes the Alerting config for a tenant",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteDeleteAlertingConfig",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/v1/receiver/test": {
      "post": {
        "description": "Test receiver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "testing"
        ],
        "operationId": "RouteTestReceiverConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ExtendedReceiver"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "412": {
            "description": "SmtpNotEnabled",
            "schema": {
              "$ref": "#/definitions/SmtpNotEnabled"
            }
          },
          "500": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/api/v1/rule/test": {
      "post": {
        "description": "Test rule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "testing"
        ],
        "operationId": "RouteTestRuleConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TestRulePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TestRuleResponse",
            "schema": {
              "$ref": "#/definitions/TestRuleResponse"
            }
          }
        }
      }
    },
    "/prometheus/{DatasourceId}/api/v1/alerts": {
      "get": {
        "description": "gets the current alerts",
        "tags": [
          "prometheus"
        ],
        "operationId": "RouteGetAlertStatuses",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AlertResponse",
            "schema": {
              "$ref": "#/definitions/AlertResponse"
            }
          }
        }
      }
    },
    "/prometheus/{DatasourceId}/api/v1/rules": {
      "get": {
        "description": "gets the evaluation statuses of all rules",
        "tags": [
          "prometheus"
        ],
        "operationId": "RouteGetRuleStatuses",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "RuleResponse",
            "schema": {
              "$ref": "#/definitions/RuleResponse"
            }
          }
        }
      }
    },
    "/ruler/{DatasourceId}/api/v1/rules": {
      "get": {
        "description": "List rule groups",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RouteGetRulesConfig",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "NamespaceConfigResponse",
            "schema": {
              "$ref": "#/definitions/NamespaceConfigResponse"
            }
          }
        }
      }
    },
    "/ruler/{DatasourceId}/api/v1/rules/{Namespace}": {
      "get": {
        "description": "Get rule groups by namespace",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RouteGetNamespaceRulesConfig",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "NamespaceConfigResponse",
            "schema": {
              "$ref": "#/definitions/NamespaceConfigResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates or updates a rule group",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RoutePostNameRulesConfig",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RuleGroupConfig"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          }
        }
      },
      "delete": {
        "description": "Delete namespace",
        "tags": [
          "ruler"
        ],
        "operationId": "RouteDeleteNamespaceRulesConfig",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          }
        }
      }
    },
    "/ruler/{DatasourceId}/api/v1/rules/{Namespace}/{Groupname}": {
      "get": {
        "description": "Get rule group",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RouteGetRulegGroupConfig",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Groupname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "RuleGroupConfigResponse",
            "schema": {
              "$ref": "#/definitions/RuleGroupConfigResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete rule group",
        "tags": [
          "ruler"
        ],
        "operationId": "RouteDeleteRuleGroupConfig",
        "parameters": [
          {
            "type": "string",
            "name": "DatasourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Groupname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Ack": {
      "type": "object",
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "Alert": {
      "type": "object",
      "title": "Alert has info for an alert.",
      "required": [
        "labels",
        "annotations",
        "state",
        "value"
      ],
      "properties": {
        "activeAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ActiveAt"
        },
        "annotations": {
          "$ref": "#/definitions/labels"
        },
        "labels": {
          "$ref": "#/definitions/labels"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "AlertDefinition": {
      "type": "object",
      "title": "AlertDefinition is the model for alert definitions in Alerting NG.",
      "properties": {
        "condition": {
          "type": "string",
          "x-go-name": "Condition"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertQuery"
          },
          "x-go-name": "Data"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "intervalSeconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IntervalSeconds"
        },
        "orgId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OrgID"
        },
        "paused": {
          "type": "boolean",
          "x-go-name": "Paused"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "uid": {
          "type": "string",
          "x-go-name": "UID"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/ngalert/models"
    },
    "AlertDiscovery": {
      "type": "object",
      "title": "AlertDiscovery has info for all active alerts.",
      "required": [
        "alerts"
      ],
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert"
          },
          "x-go-name": "Alerts"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "AlertGroups": {
      "$ref": "#/definitions/alertGroups"
    },
    "AlertInstancesResponse": {
      "type": "object",
      "properties": {
        "instances": {
          "description": "Instances is an array of arrow encoded dataframes\neach frame has a single row, and a column for each instance (alert identified by unique labels) with a boolean value (firing/not firing)",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            }
          },
          "x-go-name": "Instances"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "AlertNotification": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "disableResolveMessage": {
          "type": "boolean",
          "x-go-name": "DisableResolveMessage"
        },
        "frequency": {
          "type": "string",
          "$ref": "#/definitions/Duration"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "secureFields": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "x-go-name": "SecureFields"
        },
        "sendReminder": {
          "type": "boolean",
          "x-go-name": "SendReminder"
        },
        "settings": {
          "$ref": "#/definitions/Json"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "uid": {
          "type": "string",
          "x-go-name": "Uid"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "AlertQuery": {
      "type": "object",
      "title": "AlertQuery represents a single query associated with an alert definition.",
      "properties": {
        "model": {
          "description": "JSON is the raw JSON query and includes the above properties as well as custom properties.",
          "type": "object",
          "x-go-name": "Model"
        },
        "queryType": {
          "description": "QueryType is an optional identifier for the type of query.\nIt can be used to distinguish different types of queries.",
          "type": "string",
          "x-go-name": "QueryType"
        },
        "refId": {
          "description": "RefID is the unique identifier of the query, set by the frontend call.",
          "type": "string",
          "x-go-name": "RefID"
        },
        "relativeTimeRange": {
          "$ref": "#/definitions/RelativeTimeRange"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/ngalert/models"
    },
    "AlertResponse": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/AlertDiscovery"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "errorType": {
          "$ref": "#/definitions/ErrorType"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "AlertingRule": {
      "description": "adapted from cortex",
      "type": "object",
      "required": [
        "name",
        "query",
        "health",
        "type",
        "state",
        "annotations",
        "alerts"
      ],
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert"
          },
          "x-go-name": "Alerts"
        },
        "annotations": {
          "$ref": "#/definitions/labels"
        },
        "duration": {
          "type": "number",
          "format": "double",
          "x-go-name": "Duration"
        },
        "evaluationTime": {
          "type": "number",
          "format": "double",
          "x-go-name": "EvaluationTime"
        },
        "health": {
          "type": "string",
          "x-go-name": "Health"
        },
        "labels": {
          "$ref": "#/definitions/labels"
        },
        "lastError": {
          "type": "string",
          "x-go-name": "LastError"
        },
        "lastEvaluation": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastEvaluation"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "state": {
          "description": "State can be \"pending\", \"firing\", \"inactive\".",
          "type": "string",
          "x-go-name": "State"
        },
        "type": {
          "$ref": "#/definitions/RuleType"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "ApiRuleNode": {
      "type": "object",
      "properties": {
        "alert": {
          "type": "string",
          "x-go-name": "Alert"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Annotations"
        },
        "expr": {
          "type": "string",
          "x-go-name": "Expr"
        },
        "for": {
          "$ref": "#/definitions/Duration"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "record": {
          "type": "string",
          "x-go-name": "Record"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "Authorization": {
      "type": "object",
      "title": "Authorization contains HTTP authorization credentials.",
      "properties": {
        "Credentials": {
          "$ref": "#/definitions/Secret"
        },
        "CredentialsFile": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/prometheus/common/config"
    },
    "BasicAuth": {
      "type": "object",
      "title": "BasicAuth contains basic HTTP authentication credentials.",
      "properties": {
        "Password": {
          "$ref": "#/definitions/Secret"
        },
        "PasswordFile": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/prometheus/common/config"
    },
    "Config": {
      "type": "object",
      "title": "Config is the top-level configuration for Alertmanager's config files.",
      "properties": {
        "global": {
          "$ref": "#/definitions/GlobalConfig"
        },
        "inhibit_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InhibitRule"
          },
          "x-go-name": "InhibitRules"
        },
        "receivers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Receiver"
          },
          "x-go-name": "Receivers"
        },
        "route": {
          "$ref": "#/definitions/Route"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Templates"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "CreateAlertNotificationCommand": {
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/AlertNotification"
        },
        "disableResolveMessage": {
          "type": "boolean",
          "x-go-name": "DisableResolveMessage"
        },
        "frequency": {
          "type": "string",
          "x-go-name": "Frequency"
        },
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "secureSettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "SecureSettings"
        },
        "sendReminder": {
          "type": "boolean",
          "x-go-name": "SendReminder"
        },
        "settings": {
          "$ref": "#/definitions/Json"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "uid": {
          "type": "string",
          "x-go-name": "Uid"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "DateTime": {
      "description": "DateTime is a time but it serializes to ISO8601 format with millis\nIt knows how to read 3 different variations of a RFC3339 date time.\nMost APIs we encounter want either millisecond or second precision times.\nThis just tries to make it worry-free.",
      "type": "string",
      "format": "date-time",
      "x-go-package": "github.com/go-openapi/strfmt"
    },
    "Duration": {
      "type": "integer",
      "format": "int64",
      "title": "Duration is a type used for marshalling durations.",
      "$ref": "#/definitions/Duration"
    },
    "EmailConfig": {
      "type": "object",
      "title": "EmailConfig configures notifications via mail.",
      "properties": {
        "auth_identity": {
          "type": "string",
          "x-go-name": "AuthIdentity"
        },
        "auth_password": {
          "$ref": "#/definitions/Secret"
        },
        "auth_secret": {
          "$ref": "#/definitions/Secret"
        },
        "auth_username": {
          "type": "string",
          "x-go-name": "AuthUsername"
        },
        "from": {
          "type": "string",
          "x-go-name": "From"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Headers"
        },
        "hello": {
          "type": "string",
          "x-go-name": "Hello"
        },
        "html": {
          "type": "string",
          "x-go-name": "HTML"
        },
        "require_tls": {
          "type": "boolean",
          "x-go-name": "RequireTLS"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "smarthost": {
          "$ref": "#/definitions/HostPort"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        },
        "tls_config": {
          "$ref": "#/definitions/TLSConfig"
        },
        "to": {
          "description": "Email address to notify.",
          "type": "string",
          "x-go-name": "To"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "ErrorType": {
      "type": "string",
      "title": "ErrorType models the different API error types.",
      "x-go-package": "github.com/prometheus/client_golang/api/prometheus/v1"
    },
    "EvalAlertConditionCommand": {
      "description": "EvalAlertConditionCommand is the command for evaluating a condition",
      "type": "object",
      "properties": {
        "condition": {
          "type": "string",
          "x-go-name": "Condition"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertQuery"
          },
          "x-go-name": "Data"
        },
        "now": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Now"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/ngalert/models"
    },
    "ExtendedReceiver": {
      "type": "object",
      "properties": {
        "email_configs": {
          "$ref": "#/definitions/EmailConfig"
        },
        "grafana_managed_receiver": {
          "$ref": "#/definitions/PostableGrafanaReceiver"
        },
        "opsgenie_configs": {
          "$ref": "#/definitions/OpsGenieConfig"
        },
        "pagerduty_configs": {
          "$ref": "#/definitions/PagerdutyConfig"
        },
        "pushover_configs": {
          "$ref": "#/definitions/PushoverConfig"
        },
        "slack_configs": {
          "$ref": "#/definitions/SlackConfig"
        },
        "victorops_configs": {
          "$ref": "#/definitions/VictorOpsConfig"
        },
        "webhook_configs": {
          "$ref": "#/definitions/WebhookConfig"
        },
        "wechat_configs": {
          "$ref": "#/definitions/WechatConfig"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "ExtendedRuleNode": {
      "type": "object",
      "properties": {
        "alert": {
          "type": "string",
          "x-go-name": "Alert"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Annotations"
        },
        "expr": {
          "type": "string",
          "x-go-name": "Expr"
        },
        "for": {
          "$ref": "#/definitions/Duration"
        },
        "grafana_alert": {
          "$ref": "#/definitions/ExtendedUpsertAlertDefinitionCommand"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "record": {
          "type": "string",
          "x-go-name": "Record"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "ExtendedUpsertAlertDefinitionCommand": {
      "description": "ExtendedUpsertAlertDefinitionCommand extends UpsertAlertDefinitionCommand\nwith properties of grafana dashboard alerts",
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/AlertDefinition"
        },
        "condition": {
          "type": "string",
          "x-go-name": "Condition"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertQuery"
          },
          "x-go-name": "Data"
        },
        "exec_err_state": {
          "type": "string",
          "enum": [
            "Alerting",
            "KeepLastState"
          ],
          "x-go-name": "ExecutionErrorState"
        },
        "intervalSeconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IntervalSeconds"
        },
        "no_data_state": {
          "type": "string",
          "enum": [
            "Alerting",
            "NoData",
            "KeepLastState",
            "OK"
          ],
          "x-go-name": "NoDataState"
        },
        "receivers": {
          "description": "Receivers are optional and used for migrating notification channels of existing alerts",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Receivers"
        },
        "settings": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Settings"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "Failure": {
      "$ref": "#/definitions/ResponseDetails"
    },
    "GettableAlerts": {
      "$ref": "#/definitions/gettableAlerts"
    },
    "GettableApiAlertingConfig": {
      "type": "object",
      "properties": {
        "global": {
          "$ref": "#/definitions/GlobalConfig"
        },
        "inhibit_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InhibitRule"
          },
          "x-go-name": "InhibitRules"
        },
        "receivers": {
          "description": "Override with our superset receiver type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GettableApiReceiver"
          },
          "x-go-name": "Receivers"
        },
        "route": {
          "$ref": "#/definitions/Route"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Templates"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "GettableApiReceiver": {
      "type": "object",
      "properties": {
        "email_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailConfig"
          },
          "x-go-name": "EmailConfigs"
        },
        "grafana_managed_receiver_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GettableGrafanaReceiver"
          },
          "x-go-name": "GrafanaManagedReceivers"
        },
        "name": {
          "description": "A unique identifier for this receiver.",
          "type": "string",
          "x-go-name": "Name"
        },
        "opsgenie_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfig"
          },
          "x-go-name": "OpsGenieConfigs"
        },
        "pagerduty_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyConfig"
          },
          "x-go-name": "PagerdutyConfigs"
        },
        "pushover_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PushoverConfig"
          },
          "x-go-name": "PushoverConfigs"
        },
        "slack_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackConfig"
          },
          "x-go-name": "SlackConfigs"
        },
        "victorops_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VictorOpsConfig"
          },
          "x-go-name": "VictorOpsConfigs"
        },
        "webhook_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookConfig"
          },
          "x-go-name": "WebhookConfigs"
        },
        "wechat_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WechatConfig"
          },
          "x-go-name": "WechatConfigs"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "GettableGrafanaReceiver": {
      "$ref": "#/definitions/AlertNotification"
    },
    "GettableGrafanaReceivers": {
      "type": "object",
      "properties": {
        "grafana_managed_receiver_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GettableGrafanaReceiver"
          },
          "x-go-name": "GrafanaManagedReceivers"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "GettableSilence": {
      "$ref": "#/definitions/gettableSilence"
    },
    "GettableSilences": {
      "$ref": "#/definitions/gettableSilences"
    },
    "GettableUserConfig": {
      "type": "object",
      "properties": {
        "alertmanager_config": {
          "$ref": "#/definitions/GettableApiAlertingConfig"
        },
        "template_files": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "TemplateFiles"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "GlobalConfig": {
      "description": "GlobalConfig defines configuration parameters that are valid globally\nunless overwritten.",
      "type": "object",
      "properties": {
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "opsgenie_api_key": {
          "$ref": "#/definitions/Secret"
        },
        "opsgenie_api_url": {
          "$ref": "#/definitions/URL"
        },
        "pagerduty_url": {
          "$ref": "#/definitions/URL"
        },
        "resolve_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "slack_api_url": {
          "$ref": "#/definitions/SecretURL"
        },
        "smtp_auth_identity": {
          "type": "string",
          "x-go-name": "SMTPAuthIdentity"
        },
        "smtp_auth_password": {
          "$ref": "#/definitions/Secret"
        },
        "smtp_auth_secret": {
          "$ref": "#/definitions/Secret"
        },
        "smtp_auth_username": {
          "type": "string",
          "x-go-name": "SMTPAuthUsername"
        },
        "smtp_from": {
          "type": "string",
          "x-go-name": "SMTPFrom"
        },
        "smtp_hello": {
          "type": "string",
          "x-go-name": "SMTPHello"
        },
        "smtp_require_tls": {
          "type": "boolean",
          "x-go-name": "SMTPRequireTLS"
        },
        "smtp_smarthost": {
          "$ref": "#/definitions/HostPort"
        },
        "victorops_api_key": {
          "$ref": "#/definitions/Secret"
        },
        "victorops_api_url": {
          "$ref": "#/definitions/URL"
        },
        "wechat_api_corp_id": {
          "type": "string",
          "x-go-name": "WeChatAPICorpID"
        },
        "wechat_api_secret": {
          "$ref": "#/definitions/Secret"
        },
        "wechat_api_url": {
          "$ref": "#/definitions/URL"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "HTTPClientConfig": {
      "type": "object",
      "title": "HTTPClientConfig configures an HTTP client.",
      "properties": {
        "Authorization": {
          "$ref": "#/definitions/Authorization"
        },
        "BasicAuth": {
          "$ref": "#/definitions/BasicAuth"
        },
        "BearerToken": {
          "$ref": "#/definitions/Secret"
        },
        "BearerTokenFile": {
          "description": "The bearer token file for the targets. Deprecated in favour of\nAuthorization.CredentialsFile.",
          "type": "string"
        },
        "FollowRedirects": {
          "description": "FollowRedirects specifies whether the client should follow HTTP 3xx redirects.\nThe omitempty flag is not set, because it would be hidden from the\nmarshalled configuration when set to false.",
          "type": "boolean"
        },
        "ProxyURL": {
          "$ref": "#/definitions/URL"
        },
        "TLSConfig": {
          "$ref": "#/definitions/TLSConfig"
        }
      },
      "x-go-package": "github.com/prometheus/common/config"
    },
    "HostPort": {
      "type": "object",
      "title": "HostPort represents a \"host:port\" network address.",
      "properties": {
        "Host": {
          "type": "string"
        },
        "Port": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "InhibitRule": {
      "description": "InhibitRule defines an inhibition rule that mutes alerts that match the\ntarget labels if an alert matching the source labels exists.\nBoth alerts have to have a set of labels being equal.",
      "type": "object",
      "properties": {
        "equal": {
          "$ref": "#/definitions/LabelNames"
        },
        "source_match": {
          "description": "SourceMatch defines a set of labels that have to equal the given\nvalue for source alerts. Deprecated. Remove before v1.0 release.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "SourceMatch"
        },
        "source_match_re": {
          "$ref": "#/definitions/MatchRegexps"
        },
        "source_matchers": {
          "$ref": "#/definitions/Matchers"
        },
        "target_match": {
          "description": "TargetMatch defines a set of labels that have to equal the given\nvalue for target alerts. Deprecated. Remove before v1.0 release.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "TargetMatch"
        },
        "target_match_re": {
          "$ref": "#/definitions/MatchRegexps"
        },
        "target_matchers": {
          "$ref": "#/definitions/Matchers"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "Json": {
      "type": "object",
      "x-go-package": "github.com/grafana/grafana/pkg/components/simplejson"
    },
    "Label": {
      "type": "object",
      "title": "Label is a key/value pair of strings.",
      "properties": {
        "Name": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/prometheus/prometheus/pkg/labels"
    },
    "LabelName": {
      "description": "A LabelName is a key for a LabelSet or Metric.  It has a value associated\ntherewith.",
      "type": "string",
      "x-go-package": "github.com/prometheus/common/model"
    },
    "LabelNames": {
      "type": "array",
      "title": "LabelNames is a sortable LabelName slice. In implements sort.Interface.",
      "items": {
        "$ref": "#/definitions/LabelName"
      },
      "x-go-package": "github.com/prometheus/common/model"
    },
    "Labels": {
      "description": "Labels is a sorted set of labels. Order has to be guaranteed upon\ninstantiation.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Label"
      },
      "x-go-package": "github.com/prometheus/prometheus/pkg/labels"
    },
    "LotexQuery": {
      "type": "object",
      "properties": {
        "Expr": {
          "type": "string",
          "example": "(node_filesystem_avail_bytes{fstype!=\"\",job=\"integrations/node_exporter\"} node_filesystem_size_bytes{fstype!=\"\",job=\"integrations/node_exporter\"} * 100 \u003c 5 and node_filesystem_readonly{fstype!=\"\",job=\"integrations/node_exporter\"} == 0)"
        },
        "datasourceUid": {
          "description": "DatasourceUID is required if the query will be sent to grafana to be executed",
          "type": "string",
          "x-go-name": "DatasourceUID"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "MatchRegexps": {
      "type": "object",
      "title": "MatchRegexps represents a map of Regexp.",
      "additionalProperties": {
        "$ref": "#/definitions/Regexp"
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "MatchType": {
      "type": "integer",
      "format": "int64",
      "title": "MatchType is an enum for label matching types.",
      "x-go-package": "github.com/prometheus/alertmanager/pkg/labels"
    },
    "Matcher": {
      "type": "object",
      "title": "Matcher models the matching of a label.",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/MatchType"
        },
        "Value": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/pkg/labels"
    },
    "Matchers": {
      "description": "Matchers is a slice of Matchers that is sortable, implements Stringer, and\nprovides a Matches method to match a LabelSet against all Matchers in the\nslice. Note that some users of Matchers might require it to be sorted.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Matcher"
      },
      "$ref": "#/definitions/Matchers"
    },
    "NamespaceConfigResponse": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/RuleGroupConfig"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "NotifierConfig": {
      "type": "object",
      "title": "NotifierConfig contains base options common across all notifier configurations.",
      "properties": {
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "OpsGenieConfig": {
      "type": "object",
      "title": "OpsGenieConfig configures notifications via OpsGenie.",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/Secret"
        },
        "api_url": {
          "$ref": "#/definitions/URL"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Details"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "note": {
          "type": "string",
          "x-go-name": "Note"
        },
        "priority": {
          "type": "string",
          "x-go-name": "Priority"
        },
        "responders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfigResponder"
          },
          "x-go-name": "Responders"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "tags": {
          "type": "string",
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "OpsGenieConfigResponder": {
      "type": "object",
      "properties": {
        "id": {
          "description": "One of those 3 should be filled.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "description": "team, user, escalation, schedule etc.",
          "type": "string",
          "x-go-name": "Type"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "PagerdutyConfig": {
      "type": "object",
      "title": "PagerdutyConfig configures notifications via PagerDuty.",
      "properties": {
        "class": {
          "type": "string",
          "x-go-name": "Class"
        },
        "client": {
          "type": "string",
          "x-go-name": "Client"
        },
        "client_url": {
          "type": "string",
          "x-go-name": "ClientURL"
        },
        "component": {
          "type": "string",
          "x-go-name": "Component"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Details"
        },
        "group": {
          "type": "string",
          "x-go-name": "Group"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyImage"
          },
          "x-go-name": "Images"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyLink"
          },
          "x-go-name": "Links"
        },
        "routing_key": {
          "$ref": "#/definitions/Secret"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "service_key": {
          "$ref": "#/definitions/Secret"
        },
        "severity": {
          "type": "string",
          "x-go-name": "Severity"
        },
        "url": {
          "$ref": "#/definitions/URL"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "PagerdutyImage": {
      "description": "PagerdutyImage is an image",
      "type": "object",
      "properties": {
        "alt": {
          "type": "string",
          "x-go-name": "Alt"
        },
        "href": {
          "type": "string",
          "x-go-name": "Href"
        },
        "src": {
          "type": "string",
          "x-go-name": "Src"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "PagerdutyLink": {
      "description": "PagerdutyLink is a link",
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "x-go-name": "Href"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "Point": {
      "type": "object",
      "title": "Point represents a single data point for a given timestamp.",
      "properties": {
        "T": {
          "type": "integer",
          "format": "int64"
        },
        "V": {
          "type": "number",
          "format": "double"
        }
      },
      "x-go-package": "github.com/prometheus/prometheus/promql"
    },
    "PostableApiAlertingConfig": {
      "type": "object",
      "properties": {
        "global": {
          "$ref": "#/definitions/GlobalConfig"
        },
        "inhibit_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InhibitRule"
          },
          "x-go-name": "InhibitRules"
        },
        "receivers": {
          "description": "Override with our superset receiver type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostableApiReceiver"
          },
          "x-go-name": "Receivers"
        },
        "route": {
          "$ref": "#/definitions/Route"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Templates"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "PostableApiReceiver": {
      "type": "object",
      "properties": {
        "email_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailConfig"
          },
          "x-go-name": "EmailConfigs"
        },
        "grafana_managed_receiver_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostableGrafanaReceiver"
          },
          "x-go-name": "GrafanaManagedReceivers"
        },
        "name": {
          "description": "A unique identifier for this receiver.",
          "type": "string",
          "x-go-name": "Name"
        },
        "opsgenie_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfig"
          },
          "x-go-name": "OpsGenieConfigs"
        },
        "pagerduty_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyConfig"
          },
          "x-go-name": "PagerdutyConfigs"
        },
        "pushover_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PushoverConfig"
          },
          "x-go-name": "PushoverConfigs"
        },
        "slack_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackConfig"
          },
          "x-go-name": "SlackConfigs"
        },
        "victorops_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VictorOpsConfig"
          },
          "x-go-name": "VictorOpsConfigs"
        },
        "webhook_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookConfig"
          },
          "x-go-name": "WebhookConfigs"
        },
        "wechat_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WechatConfig"
          },
          "x-go-name": "WechatConfigs"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "PostableGrafanaReceiver": {
      "$ref": "#/definitions/CreateAlertNotificationCommand"
    },
    "PostableGrafanaReceivers": {
      "type": "object",
      "properties": {
        "grafana_managed_receiver_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostableGrafanaReceiver"
          },
          "x-go-name": "GrafanaManagedReceivers"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "PostableUserConfig": {
      "type": "object",
      "properties": {
        "alertmanager_config": {
          "$ref": "#/definitions/PostableApiAlertingConfig"
        },
        "template_files": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "TemplateFiles"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "PushoverConfig": {
      "type": "object",
      "properties": {
        "expire": {
          "$ref": "#/definitions/duration"
        },
        "html": {
          "type": "boolean",
          "x-go-name": "HTML"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "priority": {
          "type": "string",
          "x-go-name": "Priority"
        },
        "retry": {
          "$ref": "#/definitions/duration"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "sound": {
          "type": "string",
          "x-go-name": "Sound"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "token": {
          "$ref": "#/definitions/Secret"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "url_title": {
          "type": "string",
          "x-go-name": "URLTitle"
        },
        "user_key": {
          "$ref": "#/definitions/Secret"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "Receiver": {
      "type": "object",
      "title": "Receiver configuration provides configuration on how to contact a receiver.",
      "properties": {
        "email_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailConfig"
          },
          "x-go-name": "EmailConfigs"
        },
        "name": {
          "description": "A unique identifier for this receiver.",
          "type": "string",
          "x-go-name": "Name"
        },
        "opsgenie_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfig"
          },
          "x-go-name": "OpsGenieConfigs"
        },
        "pagerduty_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyConfig"
          },
          "x-go-name": "PagerdutyConfigs"
        },
        "pushover_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PushoverConfig"
          },
          "x-go-name": "PushoverConfigs"
        },
        "slack_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackConfig"
          },
          "x-go-name": "SlackConfigs"
        },
        "victorops_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VictorOpsConfig"
          },
          "x-go-name": "VictorOpsConfigs"
        },
        "webhook_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookConfig"
          },
          "x-go-name": "WebhookConfigs"
        },
        "wechat_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WechatConfig"
          },
          "x-go-name": "WechatConfigs"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "Regexp": {
      "description": "A Regexp is safe for concurrent use by multiple goroutines,\nexcept for configuration methods, such as Longest.",
      "type": "object",
      "title": "Regexp is the representation of a compiled regular expression.",
      "x-go-package": "regexp"
    },
    "RelativeTimeRange": {
      "description": "RelativeTimeRange is the per query start and end time\nfor requests.",
      "type": "object",
      "properties": {
        "from": {
          "$ref": "#/definitions/Duration"
        },
        "to": {
          "$ref": "#/definitions/Duration"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/ngalert/models"
    },
    "ResponseDetails": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "Route": {
      "type": "object",
      "title": "A Route is a node that contains definitions of how to handle alerts.",
      "properties": {
        "continue": {
          "type": "boolean",
          "x-go-name": "Continue"
        },
        "group_by": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "GroupByStr"
        },
        "group_interval": {
          "$ref": "#/definitions/Duration"
        },
        "group_wait": {
          "$ref": "#/definitions/Duration"
        },
        "match": {
          "description": "Deprecated. Remove before v1.0 release.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Match"
        },
        "match_re": {
          "$ref": "#/definitions/MatchRegexps"
        },
        "matchers": {
          "$ref": "#/definitions/Matchers"
        },
        "receiver": {
          "type": "string",
          "x-go-name": "Receiver"
        },
        "repeat_interval": {
          "$ref": "#/definitions/Duration"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Route"
          },
          "x-go-name": "Routes"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "Rule": {
      "description": "adapted from cortex",
      "type": "object",
      "required": [
        "name",
        "query",
        "health",
        "type"
      ],
      "properties": {
        "evaluationTime": {
          "type": "number",
          "format": "double",
          "x-go-name": "EvaluationTime"
        },
        "health": {
          "type": "string",
          "x-go-name": "Health"
        },
        "labels": {
          "$ref": "#/definitions/labels"
        },
        "lastError": {
          "type": "string",
          "x-go-name": "LastError"
        },
        "lastEvaluation": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastEvaluation"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "type": {
          "$ref": "#/definitions/RuleType"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "RuleDiscovery": {
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuleGroup"
          },
          "x-go-name": "RuleGroups"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "RuleGroup": {
      "type": "object",
      "required": [
        "name",
        "file",
        "rules",
        "interval"
      ],
      "properties": {
        "evaluationTime": {
          "type": "number",
          "format": "double",
          "x-go-name": "EvaluationTime"
        },
        "file": {
          "type": "string",
          "x-go-name": "File"
        },
        "interval": {
          "type": "number",
          "format": "double",
          "x-go-name": "Interval"
        },
        "lastEvaluation": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastEvaluation"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "rules": {
          "description": "In order to preserve rule ordering, while exposing type (alerting or recording)\nspecific properties, both alerting and recording rules are exposed in the\nsame array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertingRule"
          },
          "x-go-name": "Rules"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "RuleGroupConfig": {
      "type": "object",
      "properties": {
        "interval": {
          "$ref": "#/definitions/Duration"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedRuleNode"
          },
          "x-go-name": "Rules"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "RuleGroupConfigResponse": {
      "type": "object",
      "properties": {
        "interval": {
          "$ref": "#/definitions/Duration"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedRuleNode"
          },
          "x-go-name": "Rules"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "RuleResponse": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/RuleDiscovery"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "errorType": {
          "$ref": "#/definitions/ErrorType"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "RuleType": {
      "type": "string",
      "title": "RuleType models the type of a rule.",
      "x-go-package": "github.com/prometheus/client_golang/api/prometheus/v1"
    },
    "Sample": {
      "type": "object",
      "title": "Sample is a single sample belonging to a metric.",
      "properties": {
        "Metric": {
          "$ref": "#/definitions/Labels"
        },
        "T": {
          "type": "integer",
          "format": "int64"
        },
        "V": {
          "type": "number",
          "format": "double"
        }
      },
      "x-go-package": "github.com/prometheus/prometheus/promql"
    },
    "Secret": {
      "type": "string",
      "title": "Secret special type for storing secrets.",
      "x-go-package": "github.com/prometheus/common/config"
    },
    "SecretURL": {
      "title": "SecretURL is a URL that must not be revealed on marshaling.",
      "$ref": "#/definitions/URL"
    },
    "SecureJsonData": {
      "description": "SecureJsonData is used to store encrypted data (for example in data_source table). Only values are separately\nencrypted.",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/components/securejsondata"
    },
    "SilenceBody": {
      "type": "object",
      "required": [
        "comment",
        "createdBy",
        "endsAt",
        "matchers",
        "startsAt"
      ],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "createdBy": {
          "description": "created by",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "id": {
          "type": "string",
          "x-go-name": "Id"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "SlackAction": {
      "description": "See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons\nfor more information.",
      "type": "object",
      "title": "SlackAction configures a single Slack action that is sent with each notification.",
      "properties": {
        "confirm": {
          "$ref": "#/definitions/SlackConfirmationField"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "style": {
          "type": "string",
          "x-go-name": "Style"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "SlackConfig": {
      "type": "object",
      "title": "SlackConfig configures notifications via Slack.",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackAction"
          },
          "x-go-name": "Actions"
        },
        "api_url": {
          "$ref": "#/definitions/SecretURL"
        },
        "callback_id": {
          "type": "string",
          "x-go-name": "CallbackID"
        },
        "channel": {
          "description": "Slack channel override, (like #other-channel or @username).",
          "type": "string",
          "x-go-name": "Channel"
        },
        "color": {
          "type": "string",
          "x-go-name": "Color"
        },
        "fallback": {
          "type": "string",
          "x-go-name": "Fallback"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackField"
          },
          "x-go-name": "Fields"
        },
        "footer": {
          "type": "string",
          "x-go-name": "Footer"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "icon_emoji": {
          "type": "string",
          "x-go-name": "IconEmoji"
        },
        "icon_url": {
          "type": "string",
          "x-go-name": "IconURL"
        },
        "image_url": {
          "type": "string",
          "x-go-name": "ImageURL"
        },
        "link_names": {
          "type": "boolean",
          "x-go-name": "LinkNames"
        },
        "mrkdwn_in": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "MrkdwnIn"
        },
        "pretext": {
          "type": "string",
          "x-go-name": "Pretext"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "short_fields": {
          "type": "boolean",
          "x-go-name": "ShortFields"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        },
        "thumb_url": {
          "type": "string",
          "x-go-name": "ThumbURL"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "title_link": {
          "type": "string",
          "x-go-name": "TitleLink"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "SlackConfirmationField": {
      "description": "SlackConfirmationField protect users from destructive actions or particularly distinguished decisions\nby asking them to confirm their button click one more time.\nSee https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.",
      "type": "object",
      "properties": {
        "dismiss_text": {
          "type": "string",
          "x-go-name": "DismissText"
        },
        "ok_text": {
          "type": "string",
          "x-go-name": "OkText"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "SlackField": {
      "description": "Each field must contain a title, value, and optionally, a boolean value to indicate if the field\nis short enough to be displayed next to other fields designated as short.\nSee https://api.slack.com/docs/message-attachments#fields for more information.",
      "type": "object",
      "title": "SlackField configures a single Slack field that is sent with each notification.",
      "properties": {
        "short": {
          "type": "boolean",
          "x-go-name": "Short"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "SmtpNotEnabled": {
      "$ref": "#/definitions/ResponseDetails"
    },
    "Success": {
      "$ref": "#/definitions/ResponseDetails"
    },
    "TLSConfig": {
      "type": "object",
      "title": "TLSConfig configures the options for TLS connections.",
      "properties": {
        "CAFile": {
          "description": "The CA cert to use for the targets.",
          "type": "string"
        },
        "CertFile": {
          "description": "The client cert file for the targets.",
          "type": "string"
        },
        "InsecureSkipVerify": {
          "description": "Disable target certificate validation.",
          "type": "boolean"
        },
        "KeyFile": {
          "description": "The client key file for the targets.",
          "type": "string"
        },
        "ServerName": {
          "description": "Used to verify the hostname for the targets.",
          "type": "string"
        }
      },
      "x-go-package": "github.com/prometheus/common/config"
    },
    "TestRulePayload": {
      "type": "object",
      "properties": {
        "expr": {
          "$ref": "#/definitions/LotexQuery"
        },
        "grafana_condition": {
          "$ref": "#/definitions/EvalAlertConditionCommand"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "TestRuleResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "$ref": "#/definitions/Vector"
        },
        "grafana_alert_instances": {
          "$ref": "#/definitions/AlertInstancesResponse"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "URL": {
      "type": "object",
      "title": "URL is a custom URL type that allows validation at configuration load time.",
      "properties": {
        "ForceQuery": {
          "type": "boolean"
        },
        "Fragment": {
          "type": "string"
        },
        "Host": {
          "type": "string"
        },
        "Opaque": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "RawFragment": {
          "type": "string"
        },
        "RawPath": {
          "type": "string"
        },
        "RawQuery": {
          "type": "string"
        },
        "Scheme": {
          "type": "string"
        },
        "User": {
          "$ref": "#/definitions/Userinfo"
        }
      },
      "x-go-package": "github.com/prometheus/common/config"
    },
    "UpdateAlertDefinitionCommand": {
      "type": "object",
      "title": "UpdateAlertDefinitionCommand is the query for updating an existing alert definition.",
      "properties": {
        "Result": {
          "$ref": "#/definitions/AlertDefinition"
        },
        "condition": {
          "type": "string",
          "x-go-name": "Condition"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertQuery"
          },
          "x-go-name": "Data"
        },
        "intervalSeconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IntervalSeconds"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/ngalert/models"
    },
    "Userinfo": {
      "description": "The Userinfo type is an immutable encapsulation of username and\npassword details for a URL. An existing Userinfo value is guaranteed\nto have a username set (potentially empty, as allowed by RFC 2396),\nand optionally a password.",
      "type": "object",
      "x-go-package": "net/url"
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "Vector": {
      "description": "Vector is basically only an alias for model.Samples, but the\ncontract is that in a Vector, all Samples have the same timestamp.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Sample"
      },
      "x-go-package": "github.com/prometheus/prometheus/promql"
    },
    "VictorOpsConfig": {
      "type": "object",
      "title": "VictorOpsConfig configures notifications via VictorOps.",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/Secret"
        },
        "api_url": {
          "$ref": "#/definitions/URL"
        },
        "custom_fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "CustomFields"
        },
        "entity_display_name": {
          "type": "string",
          "x-go-name": "EntityDisplayName"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message_type": {
          "type": "string",
          "x-go-name": "MessageType"
        },
        "monitoring_tool": {
          "type": "string",
          "x-go-name": "MonitoringTool"
        },
        "routing_key": {
          "type": "string",
          "x-go-name": "RoutingKey"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "state_message": {
          "type": "string",
          "x-go-name": "StateMessage"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "WebhookConfig": {
      "type": "object",
      "title": "WebhookConfig configures notifications via a generic webhook.",
      "properties": {
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "max_alerts": {
          "description": "MaxAlerts is the maximum number of alerts to be sent per webhook message.\nAlerts exceeding this threshold will be truncated. Setting this to 0\nallows an unlimited number of alerts.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxAlerts"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "url": {
          "$ref": "#/definitions/URL"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "WechatConfig": {
      "type": "object",
      "title": "WechatConfig configures notifications via Wechat.",
      "properties": {
        "agent_id": {
          "type": "string",
          "x-go-name": "AgentID"
        },
        "api_secret": {
          "$ref": "#/definitions/Secret"
        },
        "api_url": {
          "$ref": "#/definitions/URL"
        },
        "corp_id": {
          "type": "string",
          "x-go-name": "CorpID"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "message_type": {
          "type": "string",
          "x-go-name": "MessageType"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "to_party": {
          "type": "string",
          "x-go-name": "ToParty"
        },
        "to_tag": {
          "type": "string",
          "x-go-name": "ToTag"
        },
        "to_user": {
          "type": "string",
          "x-go-name": "ToUser"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "alert": {
      "description": "Alert alert",
      "type": "object",
      "required": [
        "labels"
      ],
      "properties": {
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri",
          "x-go-name": "GeneratorURL"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        }
      },
      "x-go-name": "Alert",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "alertGroup": {
      "description": "AlertGroup alert group",
      "type": "object",
      "required": [
        "alerts",
        "labels",
        "receiver"
      ],
      "properties": {
        "alerts": {
          "description": "alerts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/gettableAlert"
          },
          "x-go-name": "Alerts"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "receiver": {
          "$ref": "#/definitions/receiver"
        }
      },
      "x-go-name": "AlertGroup",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "alertGroups": {
      "description": "AlertGroups alert groups",
      "type": "array",
      "items": {
        "$ref": "#/definitions/alertGroup"
      },
      "x-go-name": "AlertGroups",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "alertStatus": {
      "description": "AlertStatus alert status",
      "type": "object",
      "required": [
        "inhibitedBy",
        "silencedBy",
        "state"
      ],
      "properties": {
        "inhibitedBy": {
          "description": "inhibited by",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InhibitedBy"
        },
        "silencedBy": {
          "description": "silenced by",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SilencedBy"
        },
        "state": {
          "description": "state",
          "type": "string",
          "enum": [
            "[unprocessed active suppressed]"
          ],
          "x-go-name": "State"
        }
      },
      "x-go-name": "AlertStatus",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "alertmanagerConfig": {
      "description": "AlertmanagerConfig alertmanager config",
      "type": "object",
      "required": [
        "original"
      ],
      "properties": {
        "original": {
          "description": "original",
          "type": "string",
          "x-go-name": "Original"
        }
      },
      "x-go-name": "AlertmanagerConfig",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "alertmanagerStatus": {
      "description": "AlertmanagerStatus alertmanager status",
      "type": "object",
      "required": [
        "cluster",
        "config",
        "uptime",
        "versionInfo"
      ],
      "properties": {
        "cluster": {
          "$ref": "#/definitions/clusterStatus"
        },
        "config": {
          "$ref": "#/definitions/alertmanagerConfig"
        },
        "uptime": {
          "description": "uptime",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Uptime"
        },
        "versionInfo": {
          "$ref": "#/definitions/versionInfo"
        }
      },
      "x-go-name": "AlertmanagerStatus",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "clusterStatus": {
      "description": "ClusterStatus cluster status",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "peers": {
          "description": "peers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/peerStatus"
          },
          "x-go-name": "Peers"
        },
        "status": {
          "description": "status",
          "type": "string",
          "enum": [
            "[ready settling disabled]"
          ],
          "x-go-name": "Status"
        }
      },
      "x-go-name": "ClusterStatus",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "discoveryBase": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "errorType": {
          "$ref": "#/definitions/ErrorType"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "duration": {
      "$ref": "#/definitions/Duration"
    },
    "gettableAlert": {
      "description": "GettableAlert gettable alert",
      "type": "object",
      "required": [
        "labels",
        "annotations",
        "endsAt",
        "fingerprint",
        "receivers",
        "startsAt",
        "status",
        "updatedAt"
      ],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/labelSet"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "fingerprint": {
          "description": "fingerprint",
          "type": "string",
          "x-go-name": "Fingerprint"
        },
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri",
          "x-go-name": "GeneratorURL"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "receivers": {
          "description": "receivers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/receiver"
          },
          "x-go-name": "Receivers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        },
        "status": {
          "$ref": "#/definitions/alertStatus"
        },
        "updatedAt": {
          "description": "updated at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "GettableAlert",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "gettableAlerts": {
      "description": "GettableAlerts gettable alerts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/gettableAlert"
      },
      "x-go-name": "GettableAlerts",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "gettableSilence": {
      "description": "GettableSilence gettable silence",
      "type": "object",
      "required": [
        "comment",
        "createdBy",
        "endsAt",
        "matchers",
        "startsAt",
        "id",
        "status",
        "updatedAt"
      ],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "createdBy": {
          "description": "created by",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "id": {
          "description": "id",
          "type": "string",
          "x-go-name": "ID"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        },
        "status": {
          "$ref": "#/definitions/silenceStatus"
        },
        "updatedAt": {
          "description": "updated at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "GettableSilence",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "gettableSilences": {
      "description": "GettableSilences gettable silences",
      "type": "array",
      "items": {
        "$ref": "#/definitions/gettableSilence"
      },
      "x-go-name": "GettableSilences",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "labelSet": {
      "description": "LabelSet label set",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-name": "LabelSet",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "labels": {
      "description": "The custom marshaling for labels.Labels ends up doing this anyways.",
      "type": "object",
      "title": "override the labels type with a map for generation.",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "matcher": {
      "description": "Matcher matcher",
      "type": "object",
      "required": [
        "isRegex",
        "name",
        "value"
      ],
      "properties": {
        "isRegex": {
          "description": "is regex",
          "type": "boolean",
          "x-go-name": "IsRegex"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-name": "Matcher",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "matchers": {
      "description": "Matchers matchers",
      "type": "array",
      "items": {
        "$ref": "#/definitions/matcher"
      },
      "x-go-name": "Matchers",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "peerStatus": {
      "description": "PeerStatus peer status",
      "type": "object",
      "required": [
        "address",
        "name"
      ],
      "properties": {
        "address": {
          "description": "address",
          "type": "string",
          "x-go-name": "Address"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "PeerStatus",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "postableAlert": {
      "description": "PostableAlert postable alert",
      "type": "object",
      "required": [
        "labels"
      ],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/labelSet"
        },
        "endsAt": {
          "description": "ends at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri",
          "x-go-name": "GeneratorURL"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "startsAt": {
          "description": "starts at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        }
      },
      "x-go-name": "PostableAlert",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "postableAlerts": {
      "description": "PostableAlerts postable alerts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/postableAlert"
      },
      "x-go-name": "PostableAlerts",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "postableSilence": {
      "description": "PostableSilence postable silence",
      "type": "object",
      "required": [
        "comment",
        "createdBy",
        "endsAt",
        "matchers",
        "startsAt"
      ],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "createdBy": {
          "description": "created by",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "id": {
          "description": "id",
          "type": "string",
          "x-go-name": "ID"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        }
      },
      "x-go-name": "PostableSilence",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "receiver": {
      "description": "Receiver receiver",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "Receiver",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "silence": {
      "description": "Silence silence",
      "type": "object",
      "required": [
        "comment",
        "createdBy",
        "endsAt",
        "matchers",
        "startsAt"
      ],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "createdBy": {
          "description": "created by",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        }
      },
      "x-go-name": "Silence",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "silenceStatus": {
      "description": "SilenceStatus silence status",
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "description": "state",
          "type": "string",
          "enum": [
            "[expired active pending]"
          ],
          "x-go-name": "State"
        }
      },
      "x-go-name": "SilenceStatus",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "versionInfo": {
      "description": "VersionInfo version info",
      "type": "object",
      "required": [
        "branch",
        "buildDate",
        "buildUser",
        "goVersion",
        "revision",
        "version"
      ],
      "properties": {
        "branch": {
          "description": "branch",
          "type": "string",
          "x-go-name": "Branch"
        },
        "buildDate": {
          "description": "build date",
          "type": "string",
          "x-go-name": "BuildDate"
        },
        "buildUser": {
          "description": "build user",
          "type": "string",
          "x-go-name": "BuildUser"
        },
        "goVersion": {
          "description": "go version",
          "type": "string",
          "x-go-name": "GoVersion"
        },
        "revision": {
          "description": "revision",
          "type": "string",
          "x-go-name": "Revision"
        },
        "version": {
          "description": "version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "VersionInfo",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  }
}