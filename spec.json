{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Documentation of the API.",
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/api/alert-notifications": {
      "post": {
        "description": "creates an alert notification channel",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "grafana"
        ],
        "operationId": "RoutePostNotifiers",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateAlertNotificationCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Ok"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Conflict"
            }
          },
          "500": {
            "description": "Err",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/api/dashboards/db": {
      "post": {
        "description": "creates a dashboard with alerts",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "grafana"
        ],
        "operationId": "RoutePostGrDashboards",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SaveDashboardCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Ok"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "PermissionDenied",
            "schema": {
              "$ref": "#/definitions/PermissionDenied"
            }
          },
          "412": {
            "description": "PreconditionFailed",
            "schema": {
              "$ref": "#/definitions/PreconditionFailed"
            }
          },
          "500": {
            "description": "Err",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/api/v1/alerts": {
      "get": {
        "description": "get alertmanager alerts",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetAmAlerts",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Active",
            "description": "Show active alerts",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Silenced",
            "description": "Show silenced alerts",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Inhibited",
            "description": "Show inhibited alerts",
            "name": "inhibited",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Matchers",
            "description": "A list of matchers to filter alerts by",
            "name": "matchers",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Receivers",
            "description": "A list of receivers to filter alerts by",
            "name": "receivers",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "GettableAlerts",
            "schema": {
              "$ref": "#/definitions/GettableAlerts"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/v1/alerts/groups": {
      "get": {
        "description": "get alertmanager alerts",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetAmAlertGroups",
        "parameters": [
          {
            "type": "boolean",
            "x-go-name": "Active",
            "description": "Show active alerts",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Silenced",
            "description": "Show silenced alerts",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Inhibited",
            "description": "Show inhibited alerts",
            "name": "inhibited",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Matchers",
            "description": "A list of matchers to filter alerts by",
            "name": "matchers",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Receivers",
            "description": "A list of receivers to filter alerts by",
            "name": "receivers",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AlertGroups",
            "schema": {
              "$ref": "#/definitions/AlertGroups"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/v1/config": {
      "get": {
        "description": "gets an Alerting config",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetAlertingConfig",
        "responses": {
          "200": {
            "description": "AlertingConfigResponse",
            "schema": {
              "$ref": "#/definitions/AlertingConfigResponse"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "post": {
        "description": "sets an Alerting config",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RoutePostAlertingConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "description": "deletes the Alerting config for a tenant",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteDeleteAlertingConfig",
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/v1/status/alerts": {
      "get": {
        "description": "gets the current alerts",
        "tags": [
          "RuleStatus"
        ],
        "operationId": "RouteGetAlertStatuses",
        "responses": {
          "200": {
            "description": "AlertResponse",
            "schema": {
              "$ref": "#/definitions/AlertResponse"
            }
          }
        }
      }
    },
    "/api/v1/status/rules": {
      "get": {
        "description": "gets the evaluation statuses of all rules",
        "tags": [
          "RuleStatus"
        ],
        "operationId": "RouteGetRuleStatuses",
        "responses": {
          "200": {
            "description": "RuleResponse",
            "schema": {
              "$ref": "#/definitions/RuleResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Ack": {
      "type": "object",
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "Alert": {
      "type": "object",
      "title": "Alert has info for an alert.",
      "properties": {
        "activeAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ActiveAt"
        },
        "annotations": {
          "$ref": "#/definitions/labels"
        },
        "labels": {
          "$ref": "#/definitions/labels"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "AlertDiscovery": {
      "type": "object",
      "title": "AlertDiscovery has info for all active alerts.",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert"
          },
          "x-go-name": "Alerts"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "AlertGroups": {
      "$ref": "#/definitions/alertGroups"
    },
    "AlertNotification": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "disableResolveMessage": {
          "type": "boolean",
          "x-go-name": "DisableResolveMessage"
        },
        "frequency": {
          "$ref": "#/definitions/Duration"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "secureSettings": {
          "$ref": "#/definitions/SecureJsonData"
        },
        "sendReminder": {
          "type": "boolean",
          "x-go-name": "SendReminder"
        },
        "settings": {
          "$ref": "#/definitions/Json"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "AlertResponse": {
      "type": "object",
      "properties": {
        "Body": {
          "description": "in: body",
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/definitions/AlertDiscovery"
            },
            "error": {
              "type": "string",
              "x-go-name": "Error"
            },
            "errorType": {
              "$ref": "#/definitions/ErrorType"
            },
            "status": {
              "type": "string",
              "x-go-name": "Status"
            }
          }
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "AlertingConfigResponse": {
      "type": "object",
      "properties": {
        "Body": {
          "$ref": "#/definitions/UserConfig"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "AlertingRule": {
      "description": "adapted from cortex",
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert"
          },
          "x-go-name": "Alerts"
        },
        "annotations": {
          "$ref": "#/definitions/labels"
        },
        "duration": {
          "type": "number",
          "format": "double",
          "x-go-name": "Duration"
        },
        "evaluationTime": {
          "type": "number",
          "format": "double",
          "x-go-name": "EvaluationTime"
        },
        "health": {
          "type": "string",
          "x-go-name": "Health"
        },
        "labels": {
          "$ref": "#/definitions/labels"
        },
        "lastError": {
          "type": "string",
          "x-go-name": "LastError"
        },
        "lastEvaluation": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastEvaluation"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "state": {
          "description": "State can be \"pending\", \"firing\", \"inactive\".",
          "type": "string",
          "x-go-name": "State"
        },
        "type": {
          "$ref": "#/definitions/RuleType"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "ApiAlertingConfig": {
      "type": "object",
      "properties": {
        "global": {
          "$ref": "#/definitions/GlobalConfig"
        },
        "inhibit_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InhibitRule"
          },
          "x-go-name": "InhibitRules"
        },
        "receivers": {
          "description": "Override with our superset receiver type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiReceiver"
          },
          "x-go-name": "Receivers"
        },
        "route": {
          "$ref": "#/definitions/Route"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Templates"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "ApiReceiver": {
      "type": "object",
      "properties": {
        "email_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailConfig"
          },
          "x-go-name": "EmailConfigs"
        },
        "grafana_managed_receiver_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GrafanaReceiver"
          },
          "x-go-name": "GrafanaManagedReceivers"
        },
        "name": {
          "description": "A unique identifier for this receiver.",
          "type": "string",
          "x-go-name": "Name"
        },
        "opsgenie_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfig"
          },
          "x-go-name": "OpsGenieConfigs"
        },
        "pagerduty_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyConfig"
          },
          "x-go-name": "PagerdutyConfigs"
        },
        "pushover_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PushoverConfig"
          },
          "x-go-name": "PushoverConfigs"
        },
        "slack_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackConfig"
          },
          "x-go-name": "SlackConfigs"
        },
        "victorops_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VictorOpsConfig"
          },
          "x-go-name": "VictorOpsConfigs"
        },
        "webhook_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookConfig"
          },
          "x-go-name": "WebhookConfigs"
        },
        "wechat_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WechatConfig"
          },
          "x-go-name": "WechatConfigs"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "BadRequest": {
      "type": "object",
      "x-go-package": "github.com/grafana/alerting-api/pkg/models"
    },
    "BasicAuth": {
      "type": "object",
      "title": "BasicAuth contains basic HTTP authentication credentials.",
      "properties": {
        "Password": {
          "$ref": "#/definitions/Secret"
        },
        "PasswordFile": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/prometheus/common/config"
    },
    "BodyAlertingConfig": {
      "type": "object",
      "properties": {
        "Body": {
          "$ref": "#/definitions/UserConfig"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "Config": {
      "type": "object",
      "title": "Config is the top-level configuration for Alertmanager's config files.",
      "properties": {
        "global": {
          "$ref": "#/definitions/GlobalConfig"
        },
        "inhibit_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InhibitRule"
          },
          "x-go-name": "InhibitRules"
        },
        "receivers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Receiver"
          },
          "x-go-name": "Receivers"
        },
        "route": {
          "$ref": "#/definitions/Route"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Templates"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "Conflict": {
      "type": "object",
      "x-go-package": "github.com/grafana/alerting-api/pkg/models"
    },
    "CreateAlertNotificationCommand": {
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/AlertNotification"
        },
        "disableResolveMessage": {
          "type": "boolean",
          "x-go-name": "DisableResolveMessage"
        },
        "frequency": {
          "type": "string",
          "x-go-name": "Frequency"
        },
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "secureSettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "SecureSettings"
        },
        "sendReminder": {
          "type": "boolean",
          "x-go-name": "SendReminder"
        },
        "settings": {
          "$ref": "#/definitions/Json"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "uid": {
          "type": "string",
          "x-go-name": "Uid"
        }
      },
      "$ref": "#/definitions/CreateAlertNotificationCommand"
    },
    "Dashboard": {
      "description": "Dashboard model",
      "type": "object",
      "properties": {
        "Created": {
          "type": "string",
          "format": "date-time"
        },
        "CreatedBy": {
          "type": "integer",
          "format": "int64"
        },
        "Data": {
          "$ref": "#/definitions/Json"
        },
        "FolderId": {
          "type": "integer",
          "format": "int64"
        },
        "GnetId": {
          "type": "integer",
          "format": "int64"
        },
        "HasAcl": {
          "type": "boolean"
        },
        "Id": {
          "type": "integer",
          "format": "int64"
        },
        "IsFolder": {
          "type": "boolean"
        },
        "OrgId": {
          "type": "integer",
          "format": "int64"
        },
        "PluginId": {
          "type": "string"
        },
        "Slug": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Uid": {
          "type": "string"
        },
        "Updated": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedBy": {
          "type": "integer",
          "format": "int64"
        },
        "Version": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "DateTime": {
      "description": "DateTime is a time but it serializes to ISO8601 format with millis\nIt knows how to read 3 different variations of a RFC3339 date time.\nMost APIs we encounter want either millisecond or second precision times.\nThis just tries to make it worry-free.",
      "type": "string",
      "format": "date-time",
      "x-go-package": "github.com/go-openapi/strfmt"
    },
    "Duration": {
      "description": "Duration wraps time.Duration. It is used to parse the custom duration format\nfrom YAML.\nThis type should not propagate beyond the scope of input/output processing.",
      "type": "integer",
      "format": "int64",
      "x-go-package": "time",
      "$ref": "#/definitions/Duration"
    },
    "ElementType": {
      "type": "string",
      "title": "ElementType is the type of element that can be rendered in the frontend.",
      "x-go-package": "github.com/grafana/grafana/pkg/services/alerting"
    },
    "EmailConfig": {
      "type": "object",
      "title": "EmailConfig configures notifications via mail.",
      "properties": {
        "auth_identity": {
          "type": "string",
          "x-go-name": "AuthIdentity"
        },
        "auth_password": {
          "$ref": "#/definitions/Secret"
        },
        "auth_secret": {
          "$ref": "#/definitions/Secret"
        },
        "auth_username": {
          "type": "string",
          "x-go-name": "AuthUsername"
        },
        "from": {
          "type": "string",
          "x-go-name": "From"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Headers"
        },
        "hello": {
          "type": "string",
          "x-go-name": "Hello"
        },
        "html": {
          "type": "string",
          "x-go-name": "HTML"
        },
        "require_tls": {
          "type": "boolean",
          "x-go-name": "RequireTLS"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "smarthost": {
          "$ref": "#/definitions/HostPort"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        },
        "tls_config": {
          "$ref": "#/definitions/TLSConfig"
        },
        "to": {
          "description": "Email address to notify.",
          "type": "string",
          "x-go-name": "To"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "Err": {
      "type": "object",
      "properties": {
        "Error": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/models"
    },
    "ErrorType": {
      "type": "string",
      "title": "ErrorType models the different API error types.",
      "x-go-package": "github.com/prometheus/client_golang/api/prometheus/v1"
    },
    "GettableAlerts": {
      "$ref": "#/definitions/gettableAlerts"
    },
    "GlobalConfig": {
      "description": "GlobalConfig defines configuration parameters that are valid globally\nunless overwritten.",
      "type": "object",
      "properties": {
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "opsgenie_api_key": {
          "$ref": "#/definitions/Secret"
        },
        "opsgenie_api_url": {
          "$ref": "#/definitions/URL"
        },
        "pagerduty_url": {
          "$ref": "#/definitions/URL"
        },
        "resolve_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "slack_api_url": {
          "$ref": "#/definitions/SecretURL"
        },
        "smtp_auth_identity": {
          "type": "string",
          "x-go-name": "SMTPAuthIdentity"
        },
        "smtp_auth_password": {
          "$ref": "#/definitions/Secret"
        },
        "smtp_auth_secret": {
          "$ref": "#/definitions/Secret"
        },
        "smtp_auth_username": {
          "type": "string",
          "x-go-name": "SMTPAuthUsername"
        },
        "smtp_from": {
          "type": "string",
          "x-go-name": "SMTPFrom"
        },
        "smtp_hello": {
          "type": "string",
          "x-go-name": "SMTPHello"
        },
        "smtp_require_tls": {
          "type": "boolean",
          "x-go-name": "SMTPRequireTLS"
        },
        "smtp_smarthost": {
          "$ref": "#/definitions/HostPort"
        },
        "victorops_api_key": {
          "$ref": "#/definitions/Secret"
        },
        "victorops_api_url": {
          "$ref": "#/definitions/URL"
        },
        "wechat_api_corp_id": {
          "type": "string",
          "x-go-name": "WeChatAPICorpID"
        },
        "wechat_api_secret": {
          "$ref": "#/definitions/Secret"
        },
        "wechat_api_url": {
          "$ref": "#/definitions/URL"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "GrafanaReceiver": {
      "$ref": "#/definitions/NotifierPlugin"
    },
    "HTTPClientConfig": {
      "type": "object",
      "title": "HTTPClientConfig configures an HTTP client.",
      "properties": {
        "BasicAuth": {
          "$ref": "#/definitions/BasicAuth"
        },
        "BearerToken": {
          "$ref": "#/definitions/Secret"
        },
        "BearerTokenFile": {
          "description": "The bearer token file for the targets.",
          "type": "string"
        },
        "ProxyURL": {
          "$ref": "#/definitions/URL"
        },
        "TLSConfig": {
          "$ref": "#/definitions/TLSConfig"
        }
      },
      "x-go-package": "github.com/prometheus/common/config"
    },
    "HostPort": {
      "type": "object",
      "title": "HostPort represents a \"host:port\" network address.",
      "properties": {
        "Host": {
          "type": "string"
        },
        "Port": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "InhibitRule": {
      "description": "InhibitRule defines an inhibition rule that mutes alerts that match the\ntarget labels if an alert matching the source labels exists.\nBoth alerts have to have a set of labels being equal.",
      "type": "object",
      "properties": {
        "equal": {
          "$ref": "#/definitions/LabelNames"
        },
        "source_match": {
          "description": "SourceMatch defines a set of labels that have to equal the given\nvalue for source alerts. Deprecated. Remove before v1.0 release.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "SourceMatch"
        },
        "source_match_re": {
          "$ref": "#/definitions/MatchRegexps"
        },
        "source_matchers": {
          "$ref": "#/definitions/Matchers"
        },
        "target_match": {
          "description": "TargetMatch defines a set of labels that have to equal the given\nvalue for target alerts. Deprecated. Remove before v1.0 release.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "TargetMatch"
        },
        "target_match_re": {
          "$ref": "#/definitions/MatchRegexps"
        },
        "target_matchers": {
          "$ref": "#/definitions/Matchers"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "InputType": {
      "type": "string",
      "title": "InputType is the type of input that can be rendered in the frontend.",
      "x-go-package": "github.com/grafana/grafana/pkg/services/alerting"
    },
    "Json": {
      "type": "object",
      "x-go-package": "github.com/grafana/grafana/pkg/components/simplejson"
    },
    "LabelName": {
      "description": "A LabelName is a key for a LabelSet or Metric.  It has a value associated\ntherewith.",
      "type": "string",
      "x-go-package": "github.com/prometheus/common/model"
    },
    "LabelNames": {
      "type": "array",
      "title": "LabelNames is a sortable LabelName slice. In implements sort.Interface.",
      "items": {
        "$ref": "#/definitions/LabelName"
      },
      "x-go-package": "github.com/prometheus/common/model"
    },
    "MatchRegexps": {
      "type": "object",
      "title": "MatchRegexps represents a map of Regexp.",
      "additionalProperties": {
        "$ref": "#/definitions/Regexp"
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "MatchType": {
      "type": "integer",
      "format": "int64",
      "title": "MatchType is an enum for label matching types.",
      "x-go-package": "github.com/prometheus/alertmanager/pkg/labels"
    },
    "Matcher": {
      "type": "object",
      "title": "Matcher models the matching of a label.",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/MatchType"
        },
        "Value": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/pkg/labels"
    },
    "Matchers": {
      "description": "Matchers is a slice of Matchers that is sortable, implements Stringer, and\nprovides a Matches method to match a LabelSet against all Matchers in the\nslice. Note that some users of Matchers might require it to be sorted.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Matcher"
      },
      "$ref": "#/definitions/Matchers"
    },
    "NotifierConfig": {
      "type": "object",
      "title": "NotifierConfig contains base options common across all notifier configurations.",
      "properties": {
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "NotifierOption": {
      "type": "object",
      "title": "NotifierOption holds information about options specific for the NotifierPlugin.",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "element": {
          "$ref": "#/definitions/ElementType"
        },
        "inputType": {
          "$ref": "#/definitions/InputType"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "placeholder": {
          "type": "string",
          "x-go-name": "Placeholder"
        },
        "propertyName": {
          "type": "string",
          "x-go-name": "PropertyName"
        },
        "required": {
          "type": "boolean",
          "x-go-name": "Required"
        },
        "secure": {
          "type": "boolean",
          "x-go-name": "Secure"
        },
        "selectOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "x-go-name": "SelectOptions"
        },
        "showWhen": {
          "$ref": "#/definitions/ShowWhen"
        },
        "validationRule": {
          "type": "string",
          "x-go-name": "ValidationRule"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/alerting"
    },
    "NotifierPlugin": {
      "type": "object",
      "title": "NotifierPlugin holds meta information about a notifier.",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "heading": {
          "type": "string",
          "x-go-name": "Heading"
        },
        "info": {
          "type": "string",
          "x-go-name": "Info"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotifierOption"
          },
          "x-go-name": "Options"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/alerting"
    },
    "Ok": {
      "type": "object",
      "x-go-package": "github.com/grafana/alerting-api/pkg/models"
    },
    "OpsGenieConfig": {
      "type": "object",
      "title": "OpsGenieConfig configures notifications via OpsGenie.",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/Secret"
        },
        "api_url": {
          "$ref": "#/definitions/URL"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Details"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "note": {
          "type": "string",
          "x-go-name": "Note"
        },
        "priority": {
          "type": "string",
          "x-go-name": "Priority"
        },
        "responders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfigResponder"
          },
          "x-go-name": "Responders"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "tags": {
          "type": "string",
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "OpsGenieConfigResponder": {
      "type": "object",
      "properties": {
        "id": {
          "description": "One of those 3 should be filled.",
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "description": "team, user, escalation, schedule etc.",
          "type": "string",
          "x-go-name": "Type"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "PagerdutyConfig": {
      "type": "object",
      "title": "PagerdutyConfig configures notifications via PagerDuty.",
      "properties": {
        "class": {
          "type": "string",
          "x-go-name": "Class"
        },
        "client": {
          "type": "string",
          "x-go-name": "Client"
        },
        "client_url": {
          "type": "string",
          "x-go-name": "ClientURL"
        },
        "component": {
          "type": "string",
          "x-go-name": "Component"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Details"
        },
        "group": {
          "type": "string",
          "x-go-name": "Group"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyImage"
          },
          "x-go-name": "Images"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyLink"
          },
          "x-go-name": "Links"
        },
        "routing_key": {
          "$ref": "#/definitions/Secret"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "service_key": {
          "$ref": "#/definitions/Secret"
        },
        "severity": {
          "type": "string",
          "x-go-name": "Severity"
        },
        "url": {
          "$ref": "#/definitions/URL"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "PagerdutyImage": {
      "description": "PagerdutyImage is an image",
      "type": "object",
      "properties": {
        "alt": {
          "type": "string",
          "x-go-name": "Alt"
        },
        "href": {
          "type": "string",
          "x-go-name": "Href"
        },
        "src": {
          "type": "string",
          "x-go-name": "Src"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "PagerdutyLink": {
      "description": "PagerdutyLink is a link",
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "x-go-name": "Href"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "PermissionDenied": {
      "type": "object",
      "x-go-package": "github.com/grafana/alerting-api/pkg/models"
    },
    "PreconditionFailed": {
      "type": "object",
      "x-go-package": "github.com/grafana/alerting-api/pkg/models"
    },
    "PushoverConfig": {
      "type": "object",
      "properties": {
        "expire": {
          "$ref": "#/definitions/duration"
        },
        "html": {
          "type": "boolean",
          "x-go-name": "HTML"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "priority": {
          "type": "string",
          "x-go-name": "Priority"
        },
        "retry": {
          "$ref": "#/definitions/duration"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "sound": {
          "type": "string",
          "x-go-name": "Sound"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "token": {
          "$ref": "#/definitions/Secret"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "url_title": {
          "type": "string",
          "x-go-name": "URLTitle"
        },
        "user_key": {
          "$ref": "#/definitions/Secret"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "Receiver": {
      "type": "object",
      "title": "Receiver configuration provides configuration on how to contact a receiver.",
      "properties": {
        "email_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailConfig"
          },
          "x-go-name": "EmailConfigs"
        },
        "name": {
          "description": "A unique identifier for this receiver.",
          "type": "string",
          "x-go-name": "Name"
        },
        "opsgenie_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpsGenieConfig"
          },
          "x-go-name": "OpsGenieConfigs"
        },
        "pagerduty_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerdutyConfig"
          },
          "x-go-name": "PagerdutyConfigs"
        },
        "pushover_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PushoverConfig"
          },
          "x-go-name": "PushoverConfigs"
        },
        "slack_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackConfig"
          },
          "x-go-name": "SlackConfigs"
        },
        "victorops_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VictorOpsConfig"
          },
          "x-go-name": "VictorOpsConfigs"
        },
        "webhook_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookConfig"
          },
          "x-go-name": "WebhookConfigs"
        },
        "wechat_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WechatConfig"
          },
          "x-go-name": "WechatConfigs"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "Regexp": {
      "description": "A Regexp is safe for concurrent use by multiple goroutines,\nexcept for configuration methods, such as Longest.",
      "type": "object",
      "title": "Regexp is the representation of a compiled regular expression.",
      "x-go-package": "regexp"
    },
    "Route": {
      "type": "object",
      "title": "A Route is a node that contains definitions of how to handle alerts.",
      "properties": {
        "continue": {
          "type": "boolean",
          "x-go-name": "Continue"
        },
        "group_by": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "GroupByStr"
        },
        "group_interval": {
          "$ref": "#/definitions/Duration"
        },
        "group_wait": {
          "$ref": "#/definitions/Duration"
        },
        "match": {
          "description": "Deprecated. Remove before v1.0 release.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Match"
        },
        "match_re": {
          "$ref": "#/definitions/MatchRegexps"
        },
        "matchers": {
          "$ref": "#/definitions/Matchers"
        },
        "receiver": {
          "type": "string",
          "x-go-name": "Receiver"
        },
        "repeat_interval": {
          "$ref": "#/definitions/Duration"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Route"
          },
          "x-go-name": "Routes"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "Rule": {
      "description": "adapted from cortex",
      "type": "object",
      "properties": {
        "evaluationTime": {
          "type": "number",
          "format": "double",
          "x-go-name": "EvaluationTime"
        },
        "health": {
          "type": "string",
          "x-go-name": "Health"
        },
        "labels": {
          "$ref": "#/definitions/labels"
        },
        "lastError": {
          "type": "string",
          "x-go-name": "LastError"
        },
        "lastEvaluation": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastEvaluation"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "type": {
          "$ref": "#/definitions/RuleType"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "RuleDiscovery": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuleGroup"
          },
          "x-go-name": "RuleGroups"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "RuleGroup": {
      "type": "object",
      "properties": {
        "evaluationTime": {
          "type": "number",
          "format": "double",
          "x-go-name": "EvaluationTime"
        },
        "file": {
          "type": "string",
          "x-go-name": "File"
        },
        "interval": {
          "type": "number",
          "format": "double",
          "x-go-name": "Interval"
        },
        "lastEvaluation": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastEvaluation"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "rules": {
          "description": "In order to preserve rule ordering, while exposing type (alerting or recording)\nspecific properties, both alerting and recording rules are exposed in the\nsame array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertingRule"
          },
          "x-go-name": "Rules"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "RuleResponse": {
      "type": "object",
      "properties": {
        "Body": {
          "description": "in: body",
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/definitions/RuleDiscovery"
            },
            "error": {
              "type": "string",
              "x-go-name": "Error"
            },
            "errorType": {
              "$ref": "#/definitions/ErrorType"
            },
            "status": {
              "type": "string",
              "x-go-name": "Status"
            }
          }
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "RuleType": {
      "type": "string",
      "title": "RuleType models the type of a rule.",
      "x-go-package": "github.com/prometheus/client_golang/api/prometheus/v1"
    },
    "SaveDashboardCommand": {
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/Dashboard"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "dashboard": {
          "$ref": "#/definitions/Json"
        },
        "folderId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FolderId"
        },
        "isFolder": {
          "type": "boolean",
          "x-go-name": "IsFolder"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "overwrite": {
          "type": "boolean",
          "x-go-name": "Overwrite"
        },
        "userId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserId"
        }
      },
      "$ref": "#/definitions/SaveDashboardCommand"
    },
    "Secret": {
      "type": "string",
      "title": "Secret special type for storing secrets.",
      "x-go-package": "github.com/prometheus/common/config"
    },
    "SecretURL": {
      "title": "SecretURL is a URL that must not be revealed on marshaling.",
      "$ref": "#/definitions/URL"
    },
    "SecureJsonData": {
      "description": "SecureJsonData is used to store encrypted data (for example in data_source table). Only values are separately\nencrypted.",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/components/securejsondata"
    },
    "SelectOption": {
      "type": "object",
      "title": "SelectOption is a simple type for Options that have dropdown options. Should be used when Element is ElementTypeSelect.",
      "properties": {
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/alerting"
    },
    "ShowWhen": {
      "type": "object",
      "title": "ShowWhen holds information about when options are dependant on other options.",
      "properties": {
        "field": {
          "type": "string",
          "x-go-name": "Field"
        },
        "is": {
          "type": "string",
          "x-go-name": "Is"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/alerting"
    },
    "SlackAction": {
      "description": "See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons\nfor more information.",
      "type": "object",
      "title": "SlackAction configures a single Slack action that is sent with each notification.",
      "properties": {
        "confirm": {
          "$ref": "#/definitions/SlackConfirmationField"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "style": {
          "type": "string",
          "x-go-name": "Style"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "SlackConfig": {
      "type": "object",
      "title": "SlackConfig configures notifications via Slack.",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackAction"
          },
          "x-go-name": "Actions"
        },
        "api_url": {
          "$ref": "#/definitions/SecretURL"
        },
        "callback_id": {
          "type": "string",
          "x-go-name": "CallbackID"
        },
        "channel": {
          "description": "Slack channel override, (like #other-channel or @username).",
          "type": "string",
          "x-go-name": "Channel"
        },
        "color": {
          "type": "string",
          "x-go-name": "Color"
        },
        "fallback": {
          "type": "string",
          "x-go-name": "Fallback"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlackField"
          },
          "x-go-name": "Fields"
        },
        "footer": {
          "type": "string",
          "x-go-name": "Footer"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "icon_emoji": {
          "type": "string",
          "x-go-name": "IconEmoji"
        },
        "icon_url": {
          "type": "string",
          "x-go-name": "IconURL"
        },
        "image_url": {
          "type": "string",
          "x-go-name": "ImageURL"
        },
        "link_names": {
          "type": "boolean",
          "x-go-name": "LinkNames"
        },
        "mrkdwn_in": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "MrkdwnIn"
        },
        "pretext": {
          "type": "string",
          "x-go-name": "Pretext"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "short_fields": {
          "type": "boolean",
          "x-go-name": "ShortFields"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        },
        "thumb_url": {
          "type": "string",
          "x-go-name": "ThumbURL"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "title_link": {
          "type": "string",
          "x-go-name": "TitleLink"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "SlackConfirmationField": {
      "description": "SlackConfirmationField protect users from destructive actions or particularly distinguished decisions\nby asking them to confirm their button click one more time.\nSee https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.",
      "type": "object",
      "properties": {
        "dismiss_text": {
          "type": "string",
          "x-go-name": "DismissText"
        },
        "ok_text": {
          "type": "string",
          "x-go-name": "OkText"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "SlackField": {
      "description": "Each field must contain a title, value, and optionally, a boolean value to indicate if the field\nis short enough to be displayed next to other fields designated as short.\nSee https://api.slack.com/docs/message-attachments#fields for more information.",
      "type": "object",
      "title": "SlackField configures a single Slack field that is sent with each notification.",
      "properties": {
        "short": {
          "type": "boolean",
          "x-go-name": "Short"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "TLSConfig": {
      "type": "object",
      "title": "TLSConfig configures the options for TLS connections.",
      "properties": {
        "CAFile": {
          "description": "The CA cert to use for the targets.",
          "type": "string"
        },
        "CertFile": {
          "description": "The client cert file for the targets.",
          "type": "string"
        },
        "InsecureSkipVerify": {
          "description": "Disable target certificate validation.",
          "type": "boolean"
        },
        "KeyFile": {
          "description": "The client key file for the targets.",
          "type": "string"
        },
        "ServerName": {
          "description": "Used to verify the hostname for the targets.",
          "type": "string"
        }
      },
      "x-go-package": "github.com/prometheus/common/config"
    },
    "URL": {
      "description": "The general form represented is:\n\n[scheme:][//[userinfo@]host][/]path[?query][#fragment]\n\nURLs that do not start with a slash after the scheme are interpreted as:\n\nscheme:opaque[?query][#fragment]\n\nNote that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/.\nA consequence is that it is impossible to tell which slashes in the Path were\nslashes in the raw URL and which were %2f. This distinction is rarely important,\nbut when it is, the code should use RawPath, an optional field which only gets\nset if the default encoding is different from Path.\n\nURL's String method uses the EscapedPath method to obtain the path. See the\nEscapedPath method for more details.",
      "type": "object",
      "title": "A URL represents a parsed URL (technically, a URI reference).",
      "properties": {
        "ForceQuery": {
          "type": "boolean"
        },
        "Fragment": {
          "type": "string"
        },
        "Host": {
          "type": "string"
        },
        "Opaque": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "RawFragment": {
          "type": "string"
        },
        "RawPath": {
          "type": "string"
        },
        "RawQuery": {
          "type": "string"
        },
        "Scheme": {
          "type": "string"
        },
        "User": {
          "$ref": "#/definitions/Userinfo"
        }
      },
      "x-go-package": "net/url"
    },
    "Unauthorized": {
      "type": "object",
      "x-go-package": "github.com/grafana/alerting-api/pkg/models"
    },
    "UserConfig": {
      "type": "object",
      "properties": {
        "alertmanager_config": {
          "$ref": "#/definitions/ApiAlertingConfig"
        },
        "template_files": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "TemplateFiles"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "Userinfo": {
      "description": "The Userinfo type is an immutable encapsulation of username and\npassword details for a URL. An existing Userinfo value is guaranteed\nto have a username set (potentially empty, as allowed by RFC 2396),\nand optionally a password.",
      "type": "object",
      "x-go-package": "net/url"
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "VictorOpsConfig": {
      "type": "object",
      "title": "VictorOpsConfig configures notifications via VictorOps.",
      "properties": {
        "api_key": {
          "$ref": "#/definitions/Secret"
        },
        "api_url": {
          "$ref": "#/definitions/URL"
        },
        "custom_fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "CustomFields"
        },
        "entity_display_name": {
          "type": "string",
          "x-go-name": "EntityDisplayName"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message_type": {
          "type": "string",
          "x-go-name": "MessageType"
        },
        "monitoring_tool": {
          "type": "string",
          "x-go-name": "MonitoringTool"
        },
        "routing_key": {
          "type": "string",
          "x-go-name": "RoutingKey"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "state_message": {
          "type": "string",
          "x-go-name": "StateMessage"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "WebhookConfig": {
      "type": "object",
      "title": "WebhookConfig configures notifications via a generic webhook.",
      "properties": {
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "max_alerts": {
          "description": "MaxAlerts is the maximum number of alerts to be sent per webhook message.\nAlerts exceeding this threshold will be truncated. Setting this to 0\nallows an unlimited number of alerts.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxAlerts"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "url": {
          "$ref": "#/definitions/URL"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "WechatConfig": {
      "type": "object",
      "title": "WechatConfig configures notifications via Wechat.",
      "properties": {
        "agent_id": {
          "type": "string",
          "x-go-name": "AgentID"
        },
        "api_secret": {
          "$ref": "#/definitions/Secret"
        },
        "api_url": {
          "$ref": "#/definitions/URL"
        },
        "corp_id": {
          "type": "string",
          "x-go-name": "CorpID"
        },
        "http_config": {
          "$ref": "#/definitions/HTTPClientConfig"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "message_type": {
          "type": "string",
          "x-go-name": "MessageType"
        },
        "send_resolved": {
          "type": "boolean",
          "x-go-name": "VSendResolved"
        },
        "to_party": {
          "type": "string",
          "x-go-name": "ToParty"
        },
        "to_tag": {
          "type": "string",
          "x-go-name": "ToTag"
        },
        "to_user": {
          "type": "string",
          "x-go-name": "ToUser"
        }
      },
      "x-go-package": "github.com/prometheus/alertmanager/config"
    },
    "alert": {
      "description": "Alert alert",
      "type": "object",
      "required": [
        "labels"
      ],
      "properties": {
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri",
          "x-go-name": "GeneratorURL"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        }
      },
      "x-go-name": "Alert",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "alertGroup": {
      "description": "AlertGroup alert group",
      "type": "object",
      "required": [
        "alerts",
        "labels",
        "receiver"
      ],
      "properties": {
        "alerts": {
          "description": "alerts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/gettableAlert"
          },
          "x-go-name": "Alerts"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "receiver": {
          "$ref": "#/definitions/receiver"
        }
      },
      "x-go-name": "AlertGroup",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "alertGroups": {
      "description": "AlertGroups alert groups",
      "type": "array",
      "items": {
        "$ref": "#/definitions/alertGroup"
      },
      "x-go-name": "AlertGroups",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "alertStatus": {
      "description": "AlertStatus alert status",
      "type": "object",
      "required": [
        "inhibitedBy",
        "silencedBy",
        "state"
      ],
      "properties": {
        "inhibitedBy": {
          "description": "inhibited by",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InhibitedBy"
        },
        "silencedBy": {
          "description": "silenced by",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SilencedBy"
        },
        "state": {
          "description": "state",
          "type": "string",
          "enum": [
            "[unprocessed active suppressed]"
          ],
          "x-go-name": "State"
        }
      },
      "x-go-name": "AlertStatus",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "alertmanagerConfig": {
      "description": "AlertmanagerConfig alertmanager config",
      "type": "object",
      "required": [
        "original"
      ],
      "properties": {
        "original": {
          "description": "original",
          "type": "string",
          "x-go-name": "Original"
        }
      },
      "x-go-name": "AlertmanagerConfig",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "alertmanagerStatus": {
      "description": "AlertmanagerStatus alertmanager status",
      "type": "object",
      "required": [
        "cluster",
        "config",
        "uptime",
        "versionInfo"
      ],
      "properties": {
        "cluster": {
          "$ref": "#/definitions/clusterStatus"
        },
        "config": {
          "$ref": "#/definitions/alertmanagerConfig"
        },
        "uptime": {
          "description": "uptime",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Uptime"
        },
        "versionInfo": {
          "$ref": "#/definitions/versionInfo"
        }
      },
      "x-go-name": "AlertmanagerStatus",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "clusterStatus": {
      "description": "ClusterStatus cluster status",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "peers": {
          "description": "peers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/peerStatus"
          },
          "x-go-name": "Peers"
        },
        "status": {
          "description": "status",
          "type": "string",
          "enum": [
            "[ready settling disabled]"
          ],
          "x-go-name": "Status"
        }
      },
      "x-go-name": "ClusterStatus",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "discoveryBase": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "errorType": {
          "$ref": "#/definitions/ErrorType"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "duration": {
      "$ref": "#/definitions/Duration"
    },
    "gettableAlert": {
      "description": "GettableAlert gettable alert",
      "type": "object",
      "required": [
        "labels",
        "annotations",
        "endsAt",
        "fingerprint",
        "receivers",
        "startsAt",
        "status",
        "updatedAt"
      ],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/labelSet"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "fingerprint": {
          "description": "fingerprint",
          "type": "string",
          "x-go-name": "Fingerprint"
        },
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri",
          "x-go-name": "GeneratorURL"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "receivers": {
          "description": "receivers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/receiver"
          },
          "x-go-name": "Receivers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        },
        "status": {
          "$ref": "#/definitions/alertStatus"
        },
        "updatedAt": {
          "description": "updated at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "GettableAlert",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "gettableAlerts": {
      "description": "GettableAlerts gettable alerts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/gettableAlert"
      },
      "x-go-name": "GettableAlerts",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "gettableSilence": {
      "description": "GettableSilence gettable silence",
      "type": "object",
      "required": [
        "comment",
        "createdBy",
        "endsAt",
        "matchers",
        "startsAt",
        "id",
        "status",
        "updatedAt"
      ],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "createdBy": {
          "description": "created by",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "id": {
          "description": "id",
          "type": "string",
          "x-go-name": "ID"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        },
        "status": {
          "$ref": "#/definitions/silenceStatus"
        },
        "updatedAt": {
          "description": "updated at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "GettableSilence",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "gettableSilences": {
      "description": "GettableSilences gettable silences",
      "type": "array",
      "items": {
        "$ref": "#/definitions/gettableSilence"
      },
      "x-go-name": "GettableSilences",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "labelSet": {
      "description": "LabelSet label set",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-name": "LabelSet",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "labels": {
      "description": "The custom marshaling for labels.Labels ends up doing this anyways.",
      "type": "object",
      "title": "override the labels type with a map for generation.",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/grafana/alerting-api/pkg/api"
    },
    "matcher": {
      "description": "Matcher matcher",
      "type": "object",
      "required": [
        "isRegex",
        "name",
        "value"
      ],
      "properties": {
        "isRegex": {
          "description": "is regex",
          "type": "boolean",
          "x-go-name": "IsRegex"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-name": "Matcher",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "matchers": {
      "description": "Matchers matchers",
      "type": "array",
      "items": {
        "$ref": "#/definitions/matcher"
      },
      "x-go-name": "Matchers",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "peerStatus": {
      "description": "PeerStatus peer status",
      "type": "object",
      "required": [
        "address",
        "name"
      ],
      "properties": {
        "address": {
          "description": "address",
          "type": "string",
          "x-go-name": "Address"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "PeerStatus",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "postableAlert": {
      "description": "PostableAlert postable alert",
      "type": "object",
      "required": [
        "labels"
      ],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/labelSet"
        },
        "endsAt": {
          "description": "ends at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri",
          "x-go-name": "GeneratorURL"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "startsAt": {
          "description": "starts at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        }
      },
      "x-go-name": "PostableAlert",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "postableAlerts": {
      "description": "PostableAlerts postable alerts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/postableAlert"
      },
      "x-go-name": "PostableAlerts",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "postableSilence": {
      "description": "PostableSilence postable silence",
      "type": "object",
      "required": [
        "comment",
        "createdBy",
        "endsAt",
        "matchers",
        "startsAt"
      ],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "createdBy": {
          "description": "created by",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "id": {
          "description": "id",
          "type": "string",
          "x-go-name": "ID"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        }
      },
      "x-go-name": "PostableSilence",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "receiver": {
      "description": "Receiver receiver",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "Receiver",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "silence": {
      "description": "Silence silence",
      "type": "object",
      "required": [
        "comment",
        "createdBy",
        "endsAt",
        "matchers",
        "startsAt"
      ],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "createdBy": {
          "description": "created by",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        }
      },
      "x-go-name": "Silence",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "silenceStatus": {
      "description": "SilenceStatus silence status",
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "description": "state",
          "type": "string",
          "enum": [
            "[expired active pending]"
          ],
          "x-go-name": "State"
        }
      },
      "x-go-name": "SilenceStatus",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    },
    "versionInfo": {
      "description": "VersionInfo version info",
      "type": "object",
      "required": [
        "branch",
        "buildDate",
        "buildUser",
        "goVersion",
        "revision",
        "version"
      ],
      "properties": {
        "branch": {
          "description": "branch",
          "type": "string",
          "x-go-name": "Branch"
        },
        "buildDate": {
          "description": "build date",
          "type": "string",
          "x-go-name": "BuildDate"
        },
        "buildUser": {
          "description": "build user",
          "type": "string",
          "x-go-name": "BuildUser"
        },
        "goVersion": {
          "description": "go version",
          "type": "string",
          "x-go-name": "GoVersion"
        },
        "revision": {
          "description": "revision",
          "type": "string",
          "x-go-name": "Revision"
        },
        "version": {
          "description": "version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "VersionInfo",
      "x-go-package": "github.com/prometheus/alertmanager/api/v2/models"
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  }
}